WITH_DEV_ENV=env $$(xargs < .env.dev)
MANAGE=$(WITH_DEV_ENV) .venv/bin/python manage.py

static-analysis: lint type-check

lint: lint-flake8

type-check: type-check-mypy

test:
	$(WITH_DEV_ENV) .venv/bin/pytest --no-header

test-all: lint type-check test

serve:
	$(MANAGE) runserver --settings=owldock.settings.dev 0.0.0.0:8000 2> /tmp/stderr

lint-flake8:
	flake8 app client owldock

type-check-mypy:
	.venv/bin/mypy .

type-check-pyright:
	pyright --venv-path . app client owldock

repl-python:
	$(MANAGE) shell_plus --settings=owldock.settings.dev

create-fake-world:
	$(MANAGE) create_fake_world

create-fake-cases:
	$(MANAGE) create_fake_cases

generate-typescript-interfaces:
	$(MANAGE) generate_typescript_interfaces ../ui/src/autogenerated-interfaces.ts > /dev/null

recreate-db:
	rm -rf */migrations/*
	$(MANAGE) makemigrations app client
	$(MANAGE) migrate
	$(MANAGE) migrate --database client
	$(MANAGE) create_fake_world

db-graph:
	$(MANAGE) graph_models app client --no-inheritance --exclude-models '*BaseModel' --output /tmp/db.svg

vscode:
	code .
