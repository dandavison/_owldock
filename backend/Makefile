WITH_DEV_ENV=env $$(xargs < .env.dev)
WITH_TEST_ENV=env $$(xargs < .env.test)
MANAGE=$(WITH_DEV_ENV) .venv/bin/python manage.py

static-analysis: lint type-check

lint: lint-flake8

type-check: type-check-mypy

test:
	$(WITH_TEST_ENV) .venv/bin/pytest --no-header $$(find app client immigration owldock -name 'test_*.py')

test-all: lint type-check test

serve:
	$(MANAGE) runserver 0.0.0.0:8000

build-render:
	pip install -r requirements.txt
	python manage.py collectstatic --no-input > /dev/null

migrate-render:
	python manage.py migrate
	python manage.py migrate --database client

python-render:
	DJANGO_READ_ONLY=1 DJANGO_SETTINGS_MODULE=owldock.settings.dev python manage.py shell_plus

recreate-db-render:
	python manage.py drop_all_tables
	python manage.py migrate
	python manage.py migrate --database client
	python manage.py create_fake_world

serve-render:
	python ./manage.py runserver --noreload 0.0.0.0:8000

dumpdata:
	python ./manage.py dumpdata --all --indent 2 --database default > db/default.json
	python ./manage.py dumpdata --all --indent 2 --database client > db/client.json

lint-flake8:
	flake8 app client immigration owldock

type-check-mypy:
	.venv/bin/mypy .

type-check-pyright:
	pyright --venv-path . app client owldock

python:
	DJANGO_READ_ONLY=1 $(MANAGE) shell_plus

virtualenv:
	python3 -m venv .venv
	./.venv/bin/pip install -r requirements.txt

migrate:
	$(MANAGE) migrate
	$(MANAGE) migrate --database client

create-fake-world:
	$(MANAGE) create_fake_world

create-fake-cases:
	$(MANAGE) create_fake_cases

generate-typescript-interfaces:
	$(MANAGE) generate_typescript_interfaces \
	 	--json2ts_cmd ../ui/node_modules/.bin/json2ts \
		--module app/api/models.py \
		--output ../ui/src/autogenerated-interfaces/app.ts > /dev/null
	$(MANAGE) generate_typescript_interfaces \
	 	--json2ts_cmd ../ui/node_modules/.bin/json2ts \
		--module client/api/models.py \
		--output ../ui/src/autogenerated-interfaces/client.ts > /dev/null
	$(MANAGE) generate_typescript_interfaces \
	 	--json2ts_cmd ../ui/node_modules/.bin/json2ts \
		--module immigration/api/models.py \
		--output ../ui/src/autogenerated-interfaces/immigration.ts > /dev/null

regenerate-migrations:
	rm -rf */migrations/*
	$(MANAGE) makemigrations app client immigration

drop-all-tables:
	$(MANAGE) drop_all_tables

recreate-db: drop-all-tables migrate
	$(MANAGE) create_fake_process_rulesets
	$(MANAGE) create_fake_world

db-graph:
	$(MANAGE) graph_models app client --no-inheritance --exclude-models '*BaseModel' --output /tmp/db.svg

vscode:
	code .
