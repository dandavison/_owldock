WITH_DEV_ENV=env $$(xargs < .env.dev)
WITH_TEST_ENV=env $$(xargs < .env.test)
MANAGE=$(WITH_DEV_ENV) .venv/bin/python manage.py

static-analysis: lint type-check

lint: lint-flake8

type-check: type-check-mypy

test:
	$(WITH_TEST_ENV) .venv/bin/pytest --no-header

test-all: lint type-check test

serve:
	$(MANAGE) runserver 0.0.0.0:8000

build-render:
	pip install -r requirements.txt
	python manage.py collectstatic --no-input

recreate-db-render:
	python manage.py drop_all_tables
	python manage.py migrate
	python manage.py migrate --database client
	python manage.py create_fake_world

serve-render:
	python ./manage.py runserver --noreload 0.0.0.0:8000

lint-flake8:
	flake8 app client owldock

type-check-mypy:
	.venv/bin/mypy .

type-check-pyright:
	pyright --venv-path . app client owldock

repl-python:
	$(MANAGE) shell_plus

create-fake-world:
	$(MANAGE) drop_all_tables
	$(MANAGE) create_fake_world

create-fake-cases:
	$(MANAGE) create_fake_cases

generate-typescript-interfaces:
	$(MANAGE) generate_typescript_interfaces ../ui/src/autogenerated-interfaces.ts > /dev/null

recreate-db:
	rm -rf */migrations/*
	$(MANAGE) makemigrations app client
	$(MANAGE) drop_all_tables
	$(MANAGE) migrate
	$(MANAGE) migrate --database client
	$(MANAGE) create_fake_world

db-graph:
	$(MANAGE) graph_models app client --no-inheritance --exclude-models '*BaseModel' --output /tmp/db.svg

vscode:
	code .
