from collections import defaultdict
from operator import attrgetter
from typing import List, Union

from django.db.models import Prefetch, QuerySet
from django.contrib.contenttypes import models as contenttypes_orm_models

from app import models as app_orm_models
from client import models as client_orm_models
from immigration import models as immigration_orm_models


def get_cases_for_client_or_provider_contact(
    client_or_provider_contact: Union[
        client_orm_models.ClientContact, app_orm_models.ProviderContact
    ],
) -> List[client_orm_models.Case]:
    return prefetch_cases(
        client_or_provider_contact.cases(), client_or_provider_contact
    )


def prefetch_cases(
    cases: QuerySet[client_orm_models.Case],
    client_or_provider_contact: Union[
        client_orm_models.ClientContact, app_orm_models.ProviderContact
    ],
) -> List[client_orm_models.Case]:

    # Cache along lineages rooted at Case, in the client DB.
    _cases = list(
        cases.prefetch_related(
            "applicant__applicantnationality_set",
            Prefetch(
                "steps",
                queryset=(
                    client_or_provider_contact.case_steps().select_related(
                        "active_contract__case_step"
                    )
                ),
            ),
        )
        .select_related(
            "applicant__employer",
        )
        .order_by("-created_at")
    )
    _cache_prefetched_data_on_case_objects(_cases)
    return _cases


def _cache_prefetched_data_on_case_objects(cases: List[client_orm_models.Case]) -> None:
    # Fetch processes in default DB
    process_uuids = {c.process_uuid for c in cases}
    processes = (
        immigration_orm_models.ProcessRuleSet.objects.filter(uuid__in=process_uuids)
        .select_related(
            "route__host_country",
        )
        .prefetch_related("processrulesetstep_set__process_step__serviceitem")
    )
    uuid2process = {p.uuid: p for p in processes}
    uuid2process_step = {s.uuid: s for p in processes for s in p.get_process_steps()}

    # Fetch stored files in default DB
    case_step_uuids = {s.uuid for c in cases for s in c.steps.all()}
    stored_files = app_orm_models.StoredFile.objects.filter(
        associated_object_uuid__in=case_step_uuids,
        associated_object_content_type=(
            contenttypes_orm_models.ContentType.objects.get_for_model(
                client_orm_models.CaseStep
            )
        ),
    ).select_related("created_by")
    case_step_uuid2stored_files = defaultdict(set)
    for f in stored_files:
        case_step_uuid2stored_files[f.associated_object_uuid].add(f)

    # Fetch provider contacts in default DB
    provider_contact_uuids = {
        s.active_contract.provider_contact_uuid
        for c in cases
        for s in c.steps.all()
        if s.active_contract
    }
    uuid2provider_contact = {
        pc.uuid: pc
        for pc in app_orm_models.ProviderContact.objects.filter(
            uuid__in=provider_contact_uuids
        ).select_related("user", "provider")
    }

    # Fetch countries in default DB
    applicant_country_uuids = set()
    applicant_user_uuids = set()
    applicant_uuid2nationality_uuids = defaultdict(set)
    for c in cases:
        a = c.applicant
        applicant_country_uuids.add(a.home_country_uuid)
        applicant_user_uuids.add(a.user_uuid)
        for an in a.applicantnationality_set.all():
            applicant_country_uuids.add(an.country_uuid)
            applicant_uuid2nationality_uuids[a.uuid].add(an.country_uuid)
    uuid2country = {
        c.uuid: c
        for c in immigration_orm_models.Country.objects.filter(
            uuid__in=applicant_country_uuids
        )
    }
    uuid2user = {
        u.uuid: u
        for u in app_orm_models.User.objects.filter(uuid__in=applicant_user_uuids)
    }

    # Attach objects from the default DB to the instances generated by the
    # queries in the client DB.
    for c in cases:
        setattr(c, "process", uuid2process[c.process_uuid])
        for s in c.steps.all():
            setattr(s, "process_step", uuid2process_step[s.process_step_uuid])
            setattr(
                s,
                "_prefetched_stored_files",
                sorted(case_step_uuid2stored_files[s.uuid], key=attrgetter("name")),
            )
            if s.active_contract:
                setattr(
                    s.active_contract,
                    "provider_contact",
                    uuid2provider_contact[s.active_contract.provider_contact_uuid],
                )
        a = c.applicant
        setattr(a, "home_country", uuid2country[a.home_country_uuid])
        setattr(
            a,
            "_prefetched_nationalities",
            sorted(
                (
                    uuid2country[uuid]
                    for uuid in applicant_uuid2nationality_uuids[a.uuid]
                ),
                key=attrgetter("name"),
            ),
        )
        setattr(a, "user", uuid2user[a.user_uuid])
